---
import { Image } from "astro:assets";
import TopAlbums from "../../../components/TopAlbums.astro";

const spotify_access_token = Astro.cookies.get("spotify-access-token")?.value;

let isError = false;
let albumData = null;

const { id } = Astro.params;

const fetchSpotifyArtistData = async () => {
  try {
    const response = await fetch(
      `${Astro.url.origin}/api/v1/music/album/${id}.json`,
      {
        method: "GET",
        headers: {
          Authorization: `Bearer ${spotify_access_token}`,
        },
      }
    );
    if (!response.ok) throw new Error("Failed fetching data from spotify");
    albumData = await response.json();
  } catch (err) {
    console.log(err);
    isError = true;
  }
};
await fetchSpotifyArtistData();
---

{
  !isError && albumData != null && (
    <>
      <div class="container mx-auto px-4 py-16 md:py-0  flex flex-col items-center md:flex-row z-10">
        <div class="flex-none overflow-y-hidden">
          <Image
            inferSize={true}
            src={albumData.images[0].url}
            alt={`${albumData.id} Poster`}
            class="content-poster w-64 lg:w-96 rounded-full"
            id="content-poster"
          />
          <div class="my-4">
            <h2 class="text-3xl md:text-4xl mt-4 md:mt-0 mb-2 font-medium md:font-semibold subpixel-antialiased text-center ">
              {albumData.name}
            </h2>
          </div>
        </div>

        <div class="md:ml-24 w-full">
          <div class="container mx-auto px-4 py-16">
            <h2 class="text-2xl md:text-4xl font-medium md:font-semibold">
              Tracks
            </h2>
            <div class="flex flex-col mt-6">
              <div class="-my-2 overflow-x-auto sm:-mx-6 lg:-mx-8">
                <div class="py-2 align-middle inline-block min-w-full sm:px-6 lg:px-8">
                  <div class="shadow overflow-hidden rounded-sm">
                    <table class="min-w-full text-sm text-gray-100">
                      <tbody>
                        {albumData.tracks.map((track) => (
                          <tr
                            class={`bg-opacity-20 hover:bg-accent-dark ${track.now_playing == true ? "bg-accent-light" : "bg-black"}`}
                          >
                            <td class="px-6 py-4 whitespace-nowrap text-gray-300 hover:text-gray-100 cursor-default">
                              #{track.track_number}
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-gray-300 hover:text-gray-100 flex flex-row items-center">
                              <div>
                                <a
                                  href={`https://open.spotify.com/track/${track.id}`}
                                  target="_blank"
                                  class="hover:underline"
                                >
                                  {track.name}
                                </a>
                              </div>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-gray-300 hover:text-gray-100 cursor-default">
                              {track.artists.map((artist, index) => (
                                <>
                                  <a
                                    href={`/music/artist/${artist.id}`}
                                    class="hover:underline"
                                  >
                                    {artist.name}
                                  </a>
                                  {index < track.artists.length - 1 && ", "}
                                </>
                              ))}
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-gray-300 hover:text-gray-100 cursor-default">
                              {track.duration}
                            </td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div>
        <TopAlbums
          server:defer
          artist_id={albumData.tracks.map((track) => track.artists[0].id)[0]}
        />
      </div>
    </>
  )
}
