---
import { Image } from 'astro:assets';
import InternalError from '../../../components/InternalError.astro';
import WatchListBtn from '../../../components/WatchListBtn.astro';
import Caurosel from '../../../components/Caurosel.astro';
import Recommendations from '../../../components/Recommendations.astro';
import Downloads from '../../../components/Downloads.astro';
import Fallback from '../../../components/Fallback.astro';

const { id } = Astro.params;
const {media_type}  =Astro.props;

const url = `${Astro.url.origin}/api/v1/${media_type}/getdetails?id=${id}`;

let content = null;
let isError = false;
let retires = 5
const fetchContentDetails = async () =>{
try{
const response = await fetch(url)
if (!response.ok) {
    throw new Error(`Failed with status code ${response.status}: ${response.statusText}`)
}
const data = await response.json()


content = {
    ...data,
    backdrop_path : data.backdrop_path && `https://image.tmdb.org/t/p/original${data?.backdrop_path}`  ,
    poster_path: data?.poster_path
        ? 'https://image.tmdb.org/t/p/w500/' + data?.poster_path
        : 'https://placehold.co/500x750/333333/EEE?font=montserrat&text=404',
    vote_average: (data?.vote_average),
    release_date: new Date(data?.release_date || data?.first_air_date).toLocaleDateString('en-us', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
    }),
    genres: data?.genres.map((g: { name: string; }) => g.name).join(', '),
    crew: data?.credits.crew.slice(0,3),
    cast: data?.credits.cast.slice(0,5).map((c: { profile_path: string; }) => ({
        ...c,
        profile_path: c.profile_path
            ? 'https://image.tmdb.org/t/p/w300/' + c.profile_path
            : 'https://placehold.co/300x450/333333/EEE?font=montserrat&text=404'
    })),
    images: data?.images.backdrops.slice(0, 9),
}
} catch(err){
    if (retires>0){
        retires--;
        console.log(`Retrying fetch.. Total retires left - ${retires}`);
        await fetchContentDetails();
    }else{
    console.log(err)
    isError = true}
}
}
await fetchContentDetails()

---

{isError && (
<InternalError/>
)}
{ !isError &&  content && (
    <div class="bg-cover bg-center mt-[-70px]" style={{ backgroundImage:`url(${content.backdrop_path})` }} transition:name={`content-data-${content.id}`} >
        <div class="backdrop-blur-lg bg-black/30 bg-gradient-to-t from-primary to-transparent">
            <div class="container mx-auto px-4 py-32 flex flex-col items-center md:flex-row z-10 ">
                <div class="flex-none">
                    <Image inferSize={true} src={content.poster_path} alt={`${content.title || content.name} Poster`} class="content-poster w-64 lg:w-96 rounded-sm" id="content-poster"/>
                    <WatchListBtn media_type={media_type} id={content.id}/>
                </div>
                <div class="md:ml-24">
                    <h2 class="text-3xl md:text-4xl mt-4 md:mt-0 mb-2 font-medium md:font-semibold subpixel-antialiased text-center md:text-left">{content.title || content.name}</h2>
                    <div class="flex flex-wrap items-center text-gray-300 text-sm justify-center md:justify-start">
                        <svg class="fill-current text-red-500 w-4" viewBox="0 0 24 24">
                            <g data-name="Layer 2"><path d="M17.56 21a1 1 0 01-.46-.11L12 18.22l-5.1 2.67a1 1 0 01-1.45-1.06l1-5.63-4.12-4a1 1 0 01-.25-1 1 1 0 01.81-.68l5.7-.83 2.51-5.13a1 1 0 011.8 0l2.54 5.12 5.7.83a1 1 0 01.81.68 1 1 0 01-.25 1l-4.12 4 1 5.63a1 1 0 01-.4 1 1 1 0 01-.62.18z" data-name="star"/></g>
                        </svg>
                        <span class="ml-1">{parseFloat(content.vote_average.toFixed(1))}</span>
                        <span class="mx-2">|</span>
                        <span>{content.release_date}</span>
                        <span class="mx-2">|</span>
                        <span>{content.genres}</span>
                    </div>

                    <p class="text-gray-200 mt-8 text-justify ">{content.overview}</p>

                    <div class="mt-12">
                        <h4 class="text-white font-semibold">Featured Crew</h4>
                        <div class="flex mt-4">
                            {content?.crew.map((crew: { name: string; job: string }) => (
                                <div class="mr-8">
                                    <div class="text">{crew.name}</div>
                                    <div class="text-gray-400 text-sm">{crew.job}</div>
                                </div>
                            ))}
                        </div>
                    </div>
                    <div class="flex flex-row">
                        <div class="w-full sm:w-fit">
                            {content.videos.results.length && (
                                <div class="mt-12" >
                                    <a
                                        class="flex text-center items-center justify-center bg-accent-dark text-white rounded-sm font-normal px-5 py-4 hover:bg-accent-light transition ease-in-out duration-150"
                                        target="_blank"
                                        href={`https://www.youtube.com/embed/${content.videos.results[0].key}`}
                                    >
                                    <svg viewBox="0 0 512 512" width="30px" xmlns="http://www.w3.org/2000/svg" fill="#000000"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"><path fill="#ffffff" d="M106.854 106.002a26.003 26.003 0 0 0-25.64 29.326c16 124 16 117.344 0 241.344a26.003 26.003 0 0 0 35.776 27.332l298-124a26.003 26.003 0 0 0 0-48.008l-298-124a26.003 26.003 0 0 0-10.136-1.994z"></path></g></svg>
                                        <span class=" ml-1 text-white uppercase text-[15px] text-center font-medium tracking-[2px] transition-all duration-300 ease-in-out ">Play Trailer</span>
                                    </a>
                                </div>
                            )}
                        </div>
                    </div>
                </div>
            </div>
        </div> 
    </div>

    <div class="content-cast border-b border-tertiary pt-2">
    {content.cast != null && content.cast.length >0  && (       
        <div class="container mx-auto px-4 py-16">
            <h2 class="text-2xl md:text-4xl font-medium md:font-semibold">Cast</h2>
            <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-8">
            { content.cast.map((cast: { id: any; profile_path: string; name: string; character: unknown; }) => (
                <div class="mt-8 " transition:name={`person-data-${cast.id}`}>
                    <a href={`/people/${cast.id}`}>
                        <Image inferSize={true} id={`person-photo-${cast.id}`} src={cast.profile_path} alt={cast.name} class="thumbnail rounded-md hover:opacity-75 transition ease-in-out duration-150 shadow-xl" />
                    </a>
                    <div class="mt-2">
                        <a href={`/people/${cast.id}`} class="text-lg mt-2 hover:text-gray:300">{cast.name}</a>
                        <div class="text-sm text-gray-400">
                            {cast.character}
                        </div>
                    </div>
                </div>
            ))}
            </div>
        </div>
    )}
    </div>
    <div>
        {content?.imdb_id && (<Downloads imdb_id={content?.imdb_id} server:defer>
            <div class="flex w-full mx-auto mt-8">
                <Fallback />
            </div>
        </Downloads>)}
    </div> 
    <div class="border-b border-tertiary">
        <Caurosel images={content?.images} title || content.name={content?.title || content.name} server:defer>
            <div class="flex w-full mx-auto mt-8">
                <Fallback />
            </div>
        </Caurosel>
    </div>
    <div> 
        <Recommendations id={content.id} media={media_type} server:defer>
            <div class="flex w-full mx-auto mt-8">
                <Fallback />
            </div>
        </Recommendations>
    </div>
)}