---
import { Image } from "astro:assets";
import InternalError from "../../../components/InternalError.astro";
import Loading from "../../../components/Loading.astro";
import Caurosel from "../../../components/Caurosel.astro";
import WatchListBtn from "../../../components/WatchListBtn.astro";
import Recommendations from "../../../components/Recommendations.astro";

interface Show {
    name:string;
    poster_path: string;
    vote_average: number;
    first_air_date: string;
    genres: string;
    created_by:{name:string}[];
    cast:{id:number; profile_path:string; name:string; character:string}[];
    images:{file_path:string}[];
    videos:{results:{key:string}[]};
}


const { id } = Astro.params;
const url = `${Astro.url.origin}/api/getsdetail.json?id=${id}`;

let show: Show | null = null;
let isError = false;
let isLoading = true
let retries = 5
const fetchShowDetails = async ()=>{
    try {
  const response = await fetch(url)
  if (!response.ok) {
        throw new Error(`Failed with status code ${response.status}: ${response.statusText}`)
    }
  const data = await response.json()

  show = {
    ...data,
    poster_path: data.poster_path
      ? "https://image.tmdb.org/t/p/w500/" + data.poster_path
      : "https://placehold.co/500x750?text=:(",
    vote_average: data.vote_average,
    first_air_date: new Date(data.first_air_date).toLocaleDateString("en-us", {
      year: "numeric",
      month: "long",
      day: "numeric",
    }),
    genres: data.genres.map((g: { name: any }) => g.name).join(", "),
    cast: data.credits.cast.slice(0, 5).map((c: { profile_path: string }) => ({
      ...c,
      profile_path: c.profile_path
        ? "https://image.tmdb.org/t/p/w300/" + c.profile_path
        : "https://placehold.co/300x450?text=:(",
    })),
    images: data.images.backdrops.slice(0, 9),
  };
} catch (err) {
    if (retries>0){
        retries--;
        console.log(`Retrying fetch.. Total retires left - ${retries}`);
        await fetchShowDetails();
    }else{
  console.log(err);
  isError = true;
    }
} finally{
    isLoading = false
}
}
await fetchShowDetails()
---

{isError && <InternalError />}
{isLoading && <Loading />}
{ !isError && !isLoading && show && (
    <div class="movie-info border-b border-gray-800">
        <div class="container mx-auto px-4 py-16 flex flex-col md:flex-row">
            <div class="flex-none">
                <Image inferSize={true} src={show.poster_path} alt={show.name} class="movie-poster w-64 lg:w-96" id="movie-poster" />
                <WatchListBtn media_type="show" id={show.id} server:defer>
                <div class="flex w-full">
                    <div slot="fallback" class="mx-auto mt-2 justify-center items-center">
                        <svg class="w-20" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 300 150"><path fill="none" stroke="#DC3636" stroke-width="13" stroke-linecap="round" stroke-dasharray="300 385" stroke-dashoffset="0" d="M275 75c0 31-27 50-50 50-58 0-92-100-150-100-28 0-50 22-50 50s23 50 50 50c58 0 92-100 150-100 24 0 50 19 50 50Z"><animate attributeName="stroke-dashoffset" calcMode="spline" dur="1" values="685;-685" keySplines="0 0 1 1" repeatCount="indefinite"></animate></path></svg>
                    </div>
                </div>
                </WatchListBtn>
            </div>
            <div class="md:ml-24">
                <h2 class="text-4xl mt-4 md:mt-0 mb-2 font-semibold">{show.name}</h2>
                <div class="flex flex-wrap items-center text-gray-400 text-sm">
                    <svg class="fill-current text-orange-500 w-4" viewBox="0 0 24 24">
                        <g data-name="Layer 2"><path d="M17.56 21a1 1 0 01-.46-.11L12 18.22l-5.1 2.67a1 1 0 01-1.45-1.06l1-5.63-4.12-4a1 1 0 01-.25-1 1 1 0 01.81-.68l5.7-.83 2.51-5.13a1 1 0 011.8 0l2.54 5.12 5.7.83a1 1 0 01.81.68 1 1 0 01-.25 1l-4.12 4 1 5.63a1 1 0 01-.4 1 1 1 0 01-.62.18z" data-name="star"/></g>
                    </svg>
                    <span class="ml-1">{parseFloat(show.vote_average.toFixed(1))}</span>
                    <span class="mx-2">|</span>
                    <span>{show.first_air_date}</span>
                    <span class="mx-2">|</span>
                    <span>{show.genres}</span>
                </div>

                <p class="text-gray-300 mt-8">{show.overview}</p>

                <div class="mt-12">
                    <div class="flex mt-4">
                  {show.created_by.map((crew: { name: string; }) => (
                      <div class="mr-8">
                          <div>{crew.name}</div>
                          <div class="text-gray-400 text-sm">Creator</div>
                      </div>
                        ))}
                    </div>
                </div>
                <div class="flex flex-row">
                    <div>
                        {show.videos.results.length && (
                            <div class="mt-12">
                                <a
                                    // @click="isOpen = true"
                                    class="flex items-center bg-[#dc3636] text-white rounded font-semibold px-5 py-4 hover:bg-[#f33e3e] transition ease-in-out duration-150"
                                    target="_blank"
                                    href={`https://www.youtube.com/embed/${show.videos.results[0].key}`}
                                >
                                    <svg class="w-6 fill-current" viewBox="0 0 24 24">
                                        <path d="M0 0h24v24H0z" fill="none"/>
                                        <path d="M10 16.5l6-4.5-6-4.5v9zM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/>
                                    </svg>
                                    <span class="ml-2">Play Trailer</span>
                                </a>
                            </div>
                        )}
                    </div>
                </div>
            </div>
        </div>
    </div> 
    <div class="movie-cast border-b border-gray-800">
    <div class="container mx-auto px-4 py-16">
        <h2 class="text-4xl font-semibold">Cast</h2>
        <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-8">
        { show.cast.map((cast: { id: any; profile_path: string; name: string; character: unknown; }) => (
            <div class="mt-8">
                <a href={`/people/${cast.id}`}>
                    <Image inferSize={true} id={`person-photo-${cast.id}`} src={cast.profile_path} alt={cast.name} class="thumbnail hover:opacity-75 transition ease-in-out duration-150"/>
                </a>
                <div class="mt-2">
                    <a href={`/people/${cast.id}`} class="text-lg mt-2 hover:text-gray:300">{cast.name}</a>
                    <div class="text-sm text-gray-400">
                        {cast.character}
                    </div>
                </div>
            </div>
        ))}
        </div>
    </div>
</div> 
<div class="movie-images" x-data="{ isOpen: false, image: ''}">
    <div class="container mx-auto px-4 py-16">
        <h2 class="text-4xl font-semibold">Images</h2>
        <Caurosel images={show?.images} title={show?.name}>
            <div class="flex w-full mx-auto mt-8">
            <div slot="fallback" class="mx-auto justify-center items-center">
                <svg class="w-20" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 300 150"><path fill="none" stroke="#DC3636" stroke-width="13" stroke-linecap="round" stroke-dasharray="300 385" stroke-dashoffset="0" d="M275 75c0 31-27 50-50 50-58 0-92-100-150-100-28 0-50 22-50 50s23 50 50 50c58 0 92-100 150-100 24 0 50 19 50 50Z"><animate attributeName="stroke-dashoffset" calcMode="spline" dur="1" values="685;-685" keySplines="0 0 1 1" repeatCount="indefinite"></animate></path></svg>
            </div>
            </div>
        </Caurosel>
    </div>
</div>
<Recommendations id={show.id} media="tv">
    <div class="flex w-full mx-auto mt-8">
        <div slot="fallback" class="mx-auto justify-center items-center">
            <svg class="w-20" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 300 150"><path fill="none" stroke="#DC3636" stroke-width="13" stroke-linecap="round" stroke-dasharray="300 385" stroke-dashoffset="0" d="M275 75c0 31-27 50-50 50-58 0-92-100-150-100-28 0-50 22-50 50s23 50 50 50c58 0 92-100 150-100 24 0 50 19 50 50Z"><animate attributeName="stroke-dashoffset" calcMode="spline" dur="1" values="685;-685" keySplines="0 0 1 1" repeatCount="indefinite"></animate></path></svg>
        </div>
    </div>
</Recommendations>
)}